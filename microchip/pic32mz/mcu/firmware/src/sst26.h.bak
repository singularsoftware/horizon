/* ************************************************************************** */
/** Descriptive File Name

  @Company
    Company Name

  @File Name
    sst26.h

  @Summary
    Brief description of the file.

  @Description
    Describe the purpose of this file.
 */
/* ************************************************************************** */

#ifndef _SST26_H    /* Guard against multiple inclusion */
#define _SST26_H


// *****************************************************************************
// *****************************************************************************
// Section: Included Files
// *****************************************************************************
// *****************************************************************************

#include "configuration.h"
#include "config/default/driver/sst26/drv_sst26.h"

// DOM-IGNORE-BEGIN
#ifdef __cplusplus  // Provide C++ Compatibility

extern "C" {

#endif
// DOM-IGNORE-END

// *****************************************************************************
// *****************************************************************************
// Section: Type Definitions
// *****************************************************************************
// *****************************************************************************

/* Erase-Write-Read 2 Sector of Data (4096 *2)*/
#define BUFFER_SIZE     8192

// *****************************************************************************
/* Application states

  Summary:
    Application states enumeration

  Description:
    This enumeration defines the valid application states.  These states
    determine the behavior of the application at various times.
*/

typedef enum
{
    /* Application's state machine's initial state. */
    SST26_STATE_INIT,

    /* Open the Driver */
    SST26_STATE_OPEN_DRIVER,

    /* Get Device Geometry */
    SST26_STATE_GEOMETRY_GET,

    SST26_STATE_READY,

    /* Erase Flash */
    SST26_STATE_ERASE_FLASH,

    /* Erase Wait */
    SST26_STATE_ERASE_WAIT,

    /* Write to Memory */
    SST26_STATE_WRITE_MEMORY,

    /* Write Wait */
    SST26_STATE_WRITE_WAIT,

    /* Read From Memory */
    SST26_STATE_READ_MEMORY,

    /* Read Wait */
    SST26_STATE_READ_WAIT,

    /* The app idles */
    SST26_STATE_CLOSE,

    /* An app error has occurred */
    SST26_STATE_ERROR
} SST26_STATES;


// *****************************************************************************
/* Application Data

  Summary:
    Holds application data

  Description:
    This structure holds the application's data.

  Remarks:
    Application strings and buffers are be defined outside this structure.
 */

typedef struct
{
    /* The application's current state */
    SST26_STATES  state;

    /* Driver Handle */
    DRV_HANDLE handle;

    /* SST26 Device Geometry */
    DRV_SST26_GEOMETRY geometry;

    /* Jedec-ID*/
    uint32_t jedec_id;

    uint32_t address;
    
    uint32_t eraseIndex;
    uint32_t writeIndex;

    uint32_t dataSize;
    /* Read Buffer */
    uint8_t readBuffer[BUFFER_SIZE];

    /* Write Buffer*/
    uint8_t writeBuffer[BUFFER_SIZE];
} SST26_DATA;


// *****************************************************************************
// *****************************************************************************
// Section: Application Callback Routines
// *****************************************************************************
// *****************************************************************************
/* These routines are called by drivers when certain events occur.
*/

// *****************************************************************************
// *****************************************************************************
// Section: Application Initialization and State Machine Functions
// *****************************************************************************
// *****************************************************************************

/*******************************************************************************
  Function:
    void APP_Initialize ( void )

  Summary:
     MPLAB Harmony application initialization routine.

  Description:
    This function initializes the Harmony application.  It places the
    application in its initial state and prepares it to run so that its
    APP_Tasks function can be called.

  Precondition:
    All other system initialization routines should be called before calling
    this routine (in "SYS_Initialize").

  Parameters:
    None.

  Returns:
    None.

  Example:
    <code>
    APP_Initialize();
    </code>

  Remarks:
    This routine must be called from the SYS_Initialize function.
*/

void SST26_Initialize ( void );


/*******************************************************************************
  Function:
    void APP_Tasks ( void )

  Summary:
    MPLAB Harmony Demo application tasks function

  Description:
    This routine is the Harmony Demo application's tasks function.  It
    defines the application's state machine and core logic.

  Precondition:
    The system and application initialization ("SYS_Initialize") should be
    called before calling this.

  Parameters:
    None.

  Returns:
    None.

  Example:
    <code>
    APP_Tasks();
    </code>

  Remarks:
    This routine must be called from SYS_Tasks() routine.
 */

void SST26_Tasks( void );



bool SST26_Ready();
bool SST26_Erase(uint32_t address);
bool SST26_Write(uint8_t* buffer, uint32_t size, uint32_t address);
bool SST26_Read(uint8_t* buffer, uint32_t size, uint32_t address);


//DOM-IGNORE-BEGIN
#ifdef __cplusplus
}
#endif
//DOM-IGNORE-END
#endif